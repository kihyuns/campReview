spring boot 프로젝트 만들기

1)일반 애플리케이션

직접 기계어 파일을 실행하기    사용자 > 명령창[ $noreapd ] > 실행 > notepad.exe > os
                             (직접 기계어 파일을 실행 할 때는 다른 도우미 프로그램이 필요 없다)





소스파일을 실행하기      사용자 > 명령창 [ $node Hello.js ] >  node.exe
                                                                         (읽어서 Hello.js 실행)




자바 바이트코드 실행하기 사용자 > 명령창 [ $java Hello ] > java.exe  > os
                                                               (jvm *바이트코드인터프리터)



-------------------------------------------------------------------------------------------------


2) 스프링부트 애플리케이션


          1주소입력          2요청                    3호출
사용자    >    웹 브라우저     >    springBoot    >    Hellocontroler.class      4실행
                                               (jvm)                (.hello()
                    *명령창 대신         {--  JVM을 직접 실행하여 바이트코드를 실행하는 대신
                     웹브라우저를                  스브링부트가 대신 실행해 준다 --}
                     사용한다
                  7(출력)        6응답                   5리턴


*스프링부트는 웹서버 기능이 있다

-------------------------------------------------------------------------------------------------
기존 자바 프로젝트를 스프링부트 프로젝트로 전환하기

1)build.gradle 에 스프링 부트 관련 설명 추가
옛날엔 프로젝트 폴더 하나였지만 지금은 프로젝트 폴더 안에 메인,서브 프로젝트폴더가 많아지면서
                                                                세팅폴더를 따로 나눴다






*gradle.eclipse 빌드가 바뀌면 다시 실행해주어야 한다




---------------------------------------------------------------------------
정리 


폴더를 만들고 gradle 를 하려면 init로 기본 폴더 구성을 해야 한다

gradle init = 현재 폴더를 메이븐 표준 프로젝트 구조로 구성해준다

gradle eclipse = 이클립스가 현재 폴더를 프로젝트 폴더로 인식할 수 있도록 이클립스 IDE전용 폴더로 만들어주는것
(.project ,classpath, settings)

gradle cleanEclipse = 이클립스용 파일을 지우는 것




---------------------------------------------------------------------

*class 블록과 클래스 파일

소스파일명이 뭔지 상관없이 클래스 블럭당 클래스파일이 생긴다


소스파일이 있는데 소스파일 명이 exam120이고 블럭이 3개가 있다


                  [소스파일]
클래스 a{-}, 클래스 b{-}, 클래스 c{-}  >     소스파일로 만들어지는게 아니라 a ,b ,c class파일로 각각 컴파일 된다.
                                           (컴파일)



------------------------------------------------------------------

클래스명과 소스파일명

a.java 와 class b{-}는 달라도 괜찮다       
*보통 소스 코드의 관리를 쉽게 하기 위해 한 파일에 한 클래스를 둔다
또한 클래스 이름과 파일명을 같게 하여 찾기 쉽게 하기 때문에 굳이 클래스명과 소스파일명을 다르게 할 이유가 없다

특별한 경우가 아니라면 한 파일에 여러 클래스를 두지 않는다



그런데 만약 똑같은 소스파일에 public class라면 서로 이름이 같아야 한다 (이름이 다르면 컴파일 오류가 난다)
즉 public으로 공개된 클래스는 반드시 소스파일명과 같아야 한다

ex)  Exam0220.java 소스파일
    public class Exam2_2x {}  컴파일 오류
    public class Exam0220 {}  컴파일 가능


