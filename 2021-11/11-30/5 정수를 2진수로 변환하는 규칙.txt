1) sign magnitude (절대 부호)

ex) +5   >   0 1 0 1           sign magnitude의 문제점 : 양수와 음수의 더하기가 불가능하다
     -5    >  1 1 0 1

2) 그래서 나온것이 1의 보수

+5  >  0 1 0 1 >>> ( 1 0 1 0 ) - 1의 보수 *1이 되기 위해 보충해주는 수
-5  >   1 0 1 0 이 된다

+5  0 1 0 1
-5   1 0 1 0                       1의 보수의 문제점은 계산 결과에 +1을 해야만  정확해진다
---------------                    
     1 1 1 1
           +1
---------------
      0 0 0 0

*sign magnitude, 1의 보수 둘다 +0 과 -0이 존재한다는 문제점이 있다                                      

3) 그래서 나온것이 2의 보수 

2의 보수는 음수의 경우 1의 보수로 만든 후 미리 1을 더해준다

+5 >  0 1 0 1
-5  >  1 0 1 (0 + 1)
------------------------
0 >    0 0 0 0


4) 직접 쓰진 않지만 부동 소수점을 저장할 때 쓰는 excess-k

k값은 무조건 음수/양수 + k값 = 결과값    >   2진수로 표현
                             2^(비트수-1)

ex) 4비트라면  (2^4-1) = 2^3 = 8

저장하
려는수                                *음수에서 양수로 갈수록 2진수가 커진다
  7    +    8  =  15    1 1 1 1    *부동 소수점에서 "지수부"를 저장할 때 사용
  6    +    8  =  14    1 1 1 0
  5    +    8  =  13    1 1 0 1
  1    +    8  =  9      1 0 0 1
  0    +    8  =  8      1 0 0 0
  -1    +   8  =  7      0 1 1 1
  -8    +   8  =  0      0 0 0 0


